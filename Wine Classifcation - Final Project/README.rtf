{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 README for Red Wine Python Project:\
To run project:\
1) Save Python file MachineLearningProject.py on computer.\
2) Open terminal\
3) run code, copy and paste into terminal: \
	 python <path to file>/MachineLearning.py\
\
Expected Output (some numbers may be marginally different due to models running again):\
GRAPHICS: \
2 K-Nearest Neighbor Graphs\
2 Confusion Matrixes\
1 ROC Curve\
2 Scatter Plots\
1 Correlation Matrix\
\
TEXT:\
Nearest Neighbors\
69.54%\
Linear SVM\
66.04%\
RBF SVM\
69.35%\
Decision Tree\
64.98%\
Random Forest\
68.11%\
Neural Net\
70.11%\
AdaBoost\
68.17%\
Naive Bayes\
69.42%\
QDA\
69.35%\
Logistic Regression\
70.36%\
\
K-Nearest Confusion matrix, without normalization\
[[422 179]\
 [223 456]]\
\
Normalized K-Nearest confusion matrix\
[[0.7  0.3 ]\
 [0.33 0.67]]\
\
Accuracy for K-Nearest Neighbors \
68.59%\
F1 Score for K-Nearest Neighbors \
69.41%\
Precision for K-Nearest Neighbors \
71.81%\
Recall for K-Nearest Neighbors \
67.16%\
}